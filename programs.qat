Key:
A: register one whose value is unknown at compile time
B: register two whose value is unknown at compile time
M: immediate value whose value is known at compile time
N: immediate value whose value is known at compile time

Program M + N:

    A += M
    A += N
    halt A


Program A + B:

    A += N
    B += M
addition:
    solved-goto B stop
    A += 1
    B -= 1
    goto addition
stop:
    halt A


Program A * N:


multiply:
    solved-goto A stop
    A -= 1
    B += N
    goto multiply
stop:
    halt B


Program A // N:


divide:
    repeat N times {
        A -= 1
        solved-goto A stop
    }
    B += 1
    goto divide
stop:
    halt B


Program A % N:


loop:
    B += N
decrement:
    solved-goto B loop
    solved-goto A fix
    A -= 1
    B -= 1
    goto decrement
fix:
    solved-goto B finalize
    A -= 1
    B -= 1
    goto fix
finalize:
    A += N
    halt A


Program A * B:


a_times_b:
    B -= 1
    solved-goto B times_1
    B -= 1
    solved-goto B times_2
    B -= 1
    solved-goto B times_3
    B -= 1
    solved-goto B times_4
    ...
    B -= 1
    solved-goto B add_359
times_1:
    goto after_a_times_b
times_2:
    A *= 2
    goto after_a_times_b
...
times_359:
    A *= 359
    goto after_a_times_b


Program 2^N:


    A += 1
    B += N
loop:
    B -= 1
    solved-goto B stop
    A += A
    goto loop
stop:
    halt A


Program average:


    input A
    input B
loop:
    A += 1
    B -= 1
    solved-goto B found_total
    goto loop
found_total:
    A += 1
divide_by_2:
    A -= 1
    solved-goto A stop
    A -= 1
    solved-goto A stop
    B += 1
    goto divide_by_2
stop:
    halt B


Program fib(N):


if N == 1 {
    halt A
} else if N == 2 {
    A += 1
    halt A
} else {
    B += 1
    repeat floor((N - 3) / 2) {
        A += B
        B += A
    }
    A += B
    if N % 2 == 1 {
        halt A
    } else {
        B += A
        halt B
    }
}

0 1 1 2 3 5 8 13 21
              B  A
1 2 3 4 5 6 7 8  9
