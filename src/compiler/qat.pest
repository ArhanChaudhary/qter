WHITESPACE = _{ " " }
COMMENT    = _{ ("--[[" ~ (!"]]--" ~ ANY)* ~ "]]--") | ("--" ~ (!"\n" ~ ANY)* ~ "\n") }

program = { registers ~ "\n"* ~ statement ~ ("\n"+ ~ statement)* ~ "\n"* ~ EOI }

special_char = { "lua" | "{" | "}" | "." | ":" | "$" | "--" | "," | "<-" | "\n" | "(" | ")" | WHITESPACE }

ident = @{ (!special_char ~ ANY)+ }

number = { ASCII_DIGIT+ }

algorithm = { ident+ }

registers = { ".registers" ~ "{" ~ "\n"? ~ register_declaration ~ ("\n"+ ~ register_declaration)* ~ "\n"* ~ "}" ~ "\n"* }

register_declaration = { ident ~ ("," ~ ident)* ~ "<-" ~ register_architecture }

builtin_architecture     = { (!"builtin" ~ ident)? ~ "builtin" ~ (number | ("(" ~ "\n"* ~ number ~ ("," ~ "\n"* ~ number)* ~ ","? ~ "\n"* ~ ")")) }
custom_architecture      = { ident? ~ (ident+ | ("(" ~ "\n"* ~ algorithm ~ ("," ~ "\n"* ~ algorithm)* ~ ","? ~ "\n"* ~ ")")) }
theoretical_architecture = { "theoretical" ~ number }
register_architecture    = { builtin_architecture | custom_architecture | theoretical_architecture }

statement = { macro | define | instruction | lua_block | import }

constant    = { "$" ~ ident }
value       = { number | constant | ident | block }
label       = { ident ~ ":" }
code        = { ident ~ value* }
lua_call    = { "lua" ~ ident ~ "(" ~ "\n"? ~ value? ~ ("," ~ "\n"? ~ value)* ~ ","? ~ "\n"? ~ ")" }
instruction = { label | code | constant | lua_call }

type = { "block" | "reg" | "int" }

macro        =  { ".macro" ~ ident ~ "{" ~ ("\n"* ~ macro_branch)+ ~ "\n"* ~ "}" }
macro_arg    = ${ ident | (constant ~ ":" ~ type) }
macro_branch =  { "(" ~ macro_arg* ~ ")" ~ "=>" ~ (block | statement) }

block = { "{" ~ "\n"* ~ statement? ~ ("\n"+ ~ statement)* ~ "\n"* ~ "}" }

define = { ".define" ~ ident ~ (lua_call | value) }

import_filename = @{ident ~ ".qat"}
import = { ".import" ~ import_filename }

lua_code  = { (!"end-lua" ~ ANY)* }
lua_block = { ".start-lua" ~ lua_code ~ "end-lua" }


