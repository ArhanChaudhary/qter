WHITESPACE = _{ " " }

program = { registers ~ statement* ~ EOI }

special_char = { "{" | "}" | "." | ":" | "$" | "--" | "," | "<-" | "\n" | "(" | ")" | WHITESPACE }

ident = @{ (!special_char ~ ANY)+ }

number = { ASCII_DIGIT+ }

algorithm = { ident+ }

registers = { ".registers" ~ ident? ~ "{" ~ "\n"? ~ register_declaration ~ ("\n"+ ~ register_declaration)* ~ "\n"* ~ "}" ~ "\n"*}

register_declaration = { ident ~ ("," ~ ident)* ~ "<-" ~ register_architecture }

builtin_architecture = { (!"builtin" ~ ident)? ~ "builtin" ~ (number | ("(" ~ "\n"* ~ number ~ ("," ~ "\n"* ~ number)* ~ ","? ~ "\n"* ~ ")")) }
custom_architecture = { ident? ~ (ident+ | ("(" ~ "\n"* ~ algorithm ~ ("," ~ "\n"* ~ algorithm)* ~ ","? ~ "\n"* ~ ")")) }
theoretical_architecture = { "theoretical" ~ number }
register_architecture = { builtin_architecture | custom_architecture | theoretical_architecture }


statement = { define | instruction }

constant = { "$" ~ ident }
value = { number | constant | ident | block }
label = @{ ident ~ ":" }
code = { ident ~ value* }
lua_call = { "lua" ~ ident ~ "(" ~ "\n"? ~ value? ~ ("," ~ "\n"? ~ value)* ~ ","? ~ "\n"? ~ ")" }
instruction = { label | code | constant }

type = { "block" | "reg" | "int" }

define = { ".macro" ~ ident ~ "{" ~ ("\n"* ~ macro_branch)+ ~ "\n"* ~ "}" }
macro_arg = @{ ident | (constant ~ ":" ~ type) }
macro_branch = { "(" ~ macro_arg* ~ ")" ~ "=>" ~ (block | instruction) }

block = { "{" ~ "\n"* ~ ( instruction ~ "\n"+ )* ~ "}" }
