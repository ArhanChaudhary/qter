WHITESPACE = _{ " " }
COMMENT    = _{ ("--[[" ~ (!"--]]" ~ ANY)* ~ "--]]") | ("--" ~ (!"\n" ~ ANY)* ~ "\n") }

program = { "\n"* ~ registers ~ "\n"* ~ statement ~ ("\n"+ ~ statement)* ~ "\n"* ~ EOI }

special_char = { "lua" | "{" | "}" | "." | ":" | "$" | "--" | "," | "<-" | "←" | "\n" | "(" | ")" | "!" | WHITESPACE }

ident = @{ !(number ~ WHITESPACE) ~ (!special_char ~ ANY)+ }
tag_ident = @{ "!"? ~ ident }

number = { ASCII_DIGIT+ }

algorithm = { ident+ }

registers = { ".registers" ~ "{" ~ "\n"? ~ register_declaration ~ ("\n"+ ~ register_declaration)* ~ "\n"* ~ "}" ~ "\n"* }
register_declaration = _{ unswitchable | switchable }

unswitchable = { ident ~ ("," ~ ident)* ~ ("<-" | "←") ~ register_architecture }
switchable           = { "(" ~ "\n"* ~ unswitchable ~ ( "\n"+ ~ unswitchable )* ~ "\n"* ~ ")" }

builtin_architecture     = { (!"builtin" ~ ident) ~ "builtin" ~ (number | ("(" ~ "\n"* ~ number ~ ("," ~ "\n"* ~ number)* ~ ","? ~ "\n"* ~ ")")) }
custom_architecture      = { ident ~ (ident+ | ("(" ~ "\n"* ~ algorithm ~ ("," ~ "\n"* ~ algorithm)* ~ ","? ~ "\n"* ~ ")")) }
theoretical_architecture = { "theoretical" ~ number }
real_architecture        = { builtin_architecture | custom_architecture }
register_architecture    = _{ theoretical_architecture | real_architecture }

statement = _{ macro | instruction | lua_block | import }

constant    = { "$" ~ ident }
value       = { number | constant | ident | block }
label       = { tag_ident ~ ":" }
code        = { ident ~ value* }
lua_call    = { "lua" ~ ident ~ "(" ~ "\n"? ~ value? ~ ("," ~ "\n"? ~ value)* ~ ","? ~ "\n"? ~ ")" }
instruction = { label | code | constant | lua_call | define | registers }

type = { "block" | "reg" | "int" | "ident" }

macro        =  { ".macro" ~ tag_ident ~ ("after" ~ tag_ident)? ~ "{" ~ ("\n"* ~ macro_branch)+ ~ "\n"* ~ "}" }
macro_arg    = ${ ident | (constant ~ ":" ~ type) }
macro_branch =  { "(" ~ macro_arg* ~ ")" ~ "=>" ~ (block | statement) }

block = { "{" ~ "\n"* ~ statement? ~ ("\n"+ ~ statement)* ~ "\n"* ~ "}" }

define = { ".define" ~ ident ~ (lua_call | value) }

import_filename = @{ident ~ ".qat"}
import = { ".import" ~ import_filename }

lua_code  = { (!"end-lua" ~ ANY)* }
lua_block = _{ ".start-lua" ~ lua_code ~ "end-lua" }




